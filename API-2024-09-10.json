{"cases":[],"suites":[{"id":39,"title":"PET Store","description":null,"preconditions":null,"suites":[{"id":20,"title":"PET Endpoints","description":null,"preconditions":null,"suites":[{"id":22,"title":"GET","description":null,"preconditions":null,"suites":[{"id":35,"title":"Find pet by ID","description":null,"preconditions":null,"suites":[],"cases":[{"id":77,"title":"Retrieve Pet with Valid ID","description":"Verify that the system retrieves a pet when a valid pet ID is provided","preconditions":"The pet with the given ID exists in the store.\nThe `/pet/{petId}` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set with the valid pet ID","data":"[https://petstore.swagger.io/v2/pet/](https://petstore.swagger.io/v2/pet/12){valid pet ID}","steps":[]},{"position":2,"action":"Send a GET request","expected_result":"Response status code is `200 OK`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response contains the details of the pet with the provided ID","data":"Inspect the response content","steps":[]}],"tags":["Functional","API","Pet Store"],"params":[],"is_muted":"no"},{"id":78,"title":"Retrieve Pet with Non-existent ID","description":"Verify that the system returns an error when a non-existent pet ID is provided","preconditions":"The `/pet/{petId}` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"unknown","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set with the non-existent pet ID","data":"[https://petstore.swagger.io/v2/pet/](https://petstore.swagger.io/v2/pet/12){non-existent ID}","steps":[]},{"position":2,"action":"Send a GET request","expected_result":"Response status code is `404 Not Found`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the error message in the response body","expected_result":"The response contains an error message indicating that the pet ID does not exist.","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":79,"title":"Retrieve Pet with Invalid ID","description":"Verify that the system returns an error when an invalid pet ID is provided alphanumeric string instead of an integer","preconditions":"The `/pet/{petId}` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"e2e","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is incorrectly set with the invalid pet ID","data":"[https://petstore.swagger.io/v2/pet/](https://petstore.swagger.io/v2/pet/12){invalid pet ID}","steps":[]},{"position":2,"action":"Send a GET request","expected_result":"Response status code is `400 Bad Request`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the error message in the response body","expected_result":"The response contains an error message indicating that the pet ID is invalid.","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","API","Functional"],"params":[],"is_muted":"no"},{"id":80,"title":"Retrieve Pet with Missing ID","description":"Verify that the system returns an error when no pet ID is provided in the request.","preconditions":"The `/pet/{petId}` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is incorrectly set without the pet ID","data":"[https://petstore.swagger.io/v2/pet/](https://petstore.swagger.io/v2/pet/12){Leave the `pet ID` part empty}","steps":[]},{"position":2,"action":"Send a GET request to the `/pet/` endpoint","expected_result":"Response status code is `404 Not Found` or `400 Bad Request`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the error message in the response body","expected_result":"The response contains an error message indicating that the pet ID is required.","data":"Inspect the response content.","steps":[]}],"tags":["Pet Store","API","functionality"],"params":[],"is_muted":"no"},{"id":81,"title":"Retrieve Pet with Special Characters in ID","description":"Retrieve Pet with Special Characters in ID","preconditions":"The `/pet/{petId}` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is incorrectly set with the special characters in the pet ID","data":"[https://petstore.swagger.io/v2/pet/](https://petstore.swagger.io/v2/pet/12){pet ID = \"!@#\"}","steps":[]},{"position":2,"action":"Send a GET request","expected_result":"Response status code is `400 Bad Request`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the error message in the response body","expected_result":"The response contains an error message indicating that the pet ID is invalid.","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","API","Functional"],"params":[],"is_muted":"no"}]},{"id":36,"title":"Finds pets by status","description":null,"preconditions":null,"suites":[],"cases":[{"id":82,"title":"Retrieve Pets with Single Valid Status","description":"Verify that the system retrieves a list of pets when a single valid status is provided","preconditions":"The `/pet/findByStatus` endpoint is accessible.\nThe pet store contains pets with the status used in the test","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set with the valid status","data":"[https://petstore.swagger.io/v2/pet/findByStatus?status=available](https://petstore.swagger.io/v2/pet/findByStatus?status=available)","steps":[]},{"position":2,"action":"Send a GET request to the `/pet/findByStatus` endpoint","expected_result":"Response status code is `200 OK`","data":"Execute the request with `status=available`","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response contains a list of pets with the status \"available\"","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":83,"title":"Retrieve Pets with Multiple Valid Statuses","description":"Verify that the system retrieves a list of pets when multiple valid statuses are provided as comma-separated values","preconditions":"The `/pet/findByStatus` endpoint is accessible.\nThe pet store contains pets with the statuses used in the test","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/pet/findByStatus`","expected_result":"The URL is correctly set with the multiple valid statuses","data":"[https://petstore.swagger.io/v2/pet/findByStatus?status=available](https://petstore.swagger.io/v2/pet/findByStatus?status=available),pending,sold","steps":[]},{"position":2,"action":"GET request to the `/pet/findByStatus` endpoint","expected_result":"Response status code is `200 OK`","data":"Execute the request with `status=available,pending,sold`","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response contains a list of pets with the statuses \"available\", \"pending\", and \"sold\".","data":"Inspect the response content.","steps":[]}],"tags":["Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":84,"title":"Retrieve Pets with Invalid Status","description":"Verify that the system handles an invalid status value appropriately","preconditions":"The `/pet/findByStatus` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set with the invalid status","data":"[https://petstore.swagger.io/v2/pet/findByStatus](https://petstore.swagger.io/v2/pet/findByStatus?status=available){invalid status}","steps":[]},{"position":2,"action":"Send a GET request","expected_result":"Response status code is `400 Bad Request` or `200 OK` with an empty lis","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response is either an error message or an empty list of pets, indicating that no pets match the invalid status","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","API"],"params":[],"is_muted":"no"},{"id":85,"title":"Retrieve Pets with Empty Status Value","description":"Verify that the system returns an error or default response when the status parameter is empty","preconditions":"The `/pet/findByStatus` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"he URL is set with an empty status parameter","data":"[https://petstore.swagger.io/v2/pet/findByStatus?status=](https://petstore.swagger.io/v2/pet/findByStatus?status=available){empty status}","steps":[]},{"position":2,"action":"Send a GET request","expected_result":"Response status code is `400 Bad Request` or 200 ok a list of pets without status","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the response body.","expected_result":"The response contains an error message or a list of pets without status","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","API"],"params":[],"is_muted":"no"},{"id":86,"title":"Retrieve Pets with Mixed Valid and Invalid Status Values","description":"Verify that the system handles a combination of valid and invalid status values appropriately.","preconditions":"The `/pet/findByStatus` endpoint is accessible.","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"unknown","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set with the combination of status values","data":"[https://petstore.swagger.io/v2/pet/findByStatus?status=](https://petstore.swagger.io/v2/pet/findByStatus?status=available){aviabile,invalid status}","steps":[]},{"position":2,"action":"Send a GET request","expected_result":"Response status code is `200 OK`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response contains a list of pets with the valid status (\"available\") and either ignores the invalid status or includes an error message related to the invalid status","data":"Inspect the response content","steps":[]}],"tags":["API","Pet Store"],"params":[],"is_muted":"no"}]}],"cases":[]},{"id":21,"title":"POST","description":null,"preconditions":null,"suites":[{"id":2,"title":"Add a new pet to the store","description":null,"preconditions":null,"suites":[],"cases":[{"id":9,"title":"Create a New Pet with Valid Data","description":"Verifies that a new pet can be successfully created when all required fields are provided with valid data","preconditions":"The server is running, and the endpoint `/pet` is available.\nEnsure that there are no existing pets with the same `ID`","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Provide a valid JSON body for the pet data","expected_result":"The JSON body is correctly structured and contains valid data","data":"{ \"id\": 12345, \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"name\": \"Rex\", \"photoUrls\": [ \"http://example.com/dog.jpg\" ], \"tags\": [ { \"id\": 1, \"name\": \"friendly\" } ], \"status\": \"available\" }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint","expected_result":"Response status code is `200 OK`, and the pet is successfully added to the store.","data":"Execute the POST request with the provided JSON body","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"The response contains the details of the newly created pet, matching the data sent in the request","data":"Check the response content","steps":[]}],"tags":["Functional","API","Pet Store","Create Pet"],"params":[],"is_muted":"no"},{"id":10,"title":"Create a New Pet with Missing Name Field","description":"Verifies the API's response when the `id` field is missing, ensuring the system enforces its requirement for pet creation.","preconditions":"The server is running, and the endpoint `/pet` is available.\nEnsure that there are no existing pets with the same `ID`","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Provide a JSON body for the pet data with the name field missing","expected_result":"The JSON body is structured correctly but is missing the `name` field","data":"{ \"id\": 12346, \"category\": { \"id\": 2, \"name\": \"Cats\" }, \"photoUrls\": [ \"http://example.com/cat.jpg\" ], \"tags\": [ { \"id\": 2, \"name\": \"cute\" } ], \"status\": \"available\" }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint","expected_result":"Response status code is `400 Bad Request`, indicating that the name field is required.","data":"Execute the POST request with the provided JSON body","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"The response contains an error message indicating that the `name` field is required","data":"Check the response content","steps":[]}],"tags":["Create Pet","Pet Store","API","functionality"],"params":[],"is_muted":"no"},{"id":11,"title":"Create a New Pet with Missing ID Field","description":"Verifies the system's behavior when attempting to create a new pet without providing the `id` field","preconditions":"The server is running, and the `/pet` endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet without an `id` field","expected_result":"JSON object is correctly created without an `id`","data":"{ \"name\": \"doggie\", \"photoUrls\": [\"http://example.com/photo1.jpg\"], \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"tags\": [{ \"id\": 1, \"name\": \"tag1\" }], \"status\": \"available\" }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint with the JSON body","expected_result":"Response status code is `400 Bad Request` or an appropriate error message indicating that the `id` is missing.","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response contains an error message indicating that the `id` field is required.","data":"Check response content","steps":[]}],"tags":["Pet Store","Functional","API","Create Pet"],"params":[],"is_muted":"no"},{"id":12,"title":"Create a New Pet with Invalid Data Types","description":"Verifies that the API correctly handles a situation where fields like `ID` are provided as strings instead of integers","preconditions":"The server is running, and the `/pet` endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with invalid data types `id` as a string instead of an integer","expected_result":"JSON object is correctly created with invalid data types","data":"{ \"id\": \"invalid_id\", \"name\": \"doggie\", \"photoUrls\": [\"http://example.com/photo1.jpg\"], \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"tags\": [{ \"id\": 1, \"name\": \"tag1\" }], \"status\": \"available\" }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint with the JSON body","expected_result":"esponse status code is `400 Bad Request` or an appropriate error message indicating that the data types are invalid.","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response contains an error message indicating that the provided data types are invalid","data":"Check response content","steps":[]}],"tags":["Create Pet","Functional","API","Pet Store"],"params":[],"is_muted":"no"},{"id":13,"title":"Create a New Pet with Empty photo URLS Array","description":"Ensures that the API handles an empty `PHOTO URL` array correctly","preconditions":"The server is running, and the `/pet` endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with an empty `photoUrls` array","expected_result":"JSON object is correctly created with an empty `PHOTO URL` array","data":"{ \"id\": 123, \"name\": \"doggie\", \"photoUrls\": [], \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"tags\": [{ \"id\": 1, \"name\": \"tag1\" }], \"status\": \"available\" }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint with the JSON body","expected_result":"Response status code is `400 Bad Request` or an appropriate error message indicating that `PHOTO URL` cannot be empty.","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response contains an error message indicating that `photoUrls` must not be empty.","data":"Check response content","steps":[]}],"tags":["Create Pet","Pet Store","API","Functional"],"params":[],"is_muted":"no"},{"id":14,"title":"Create a New Pet with Duplicate ID","description":"Ensures that the API correctly identifies and rejects duplicate IDs, maintaining the uniqueness of pet identifiers in the system.","preconditions":"A pet with the given ID already exists in the database","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with a duplicate `ID`","expected_result":"JSON object is correctly created with a duplicate `ID`","data":"{ \"id\": 123, \"name\": \"doggie\", \"photoUrls\": [\"http://example.com/photo1.jpg\"], \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"tags\": [{ \"id\": 1, \"name\": \"tag1\" }], \"status\": \"available\" }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint with the JSON body","expected_result":"Response status code is `409 Conflict` or an appropriate error message indicating that the `ID` already exists.","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response contains an error message indicating that the `ID` already exists.","data":"Check response content","steps":[]}],"tags":["Create Pet","Pet Store","API","Functional"],"params":[],"is_muted":"no"},{"id":15,"title":"Create a New Pet with Maximum Length Exceeded for Fields","description":"This test case checks if the API returns an error when a field like the name exceeds its allowed length","preconditions":"The server is running, and the `/pet` endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set.","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with a field value exceeding the maximum allowed length field with 256 characters","expected_result":"JSON object is correctly created with a field exceeding the maximum length.","data":"{ \"id\": 123, \"name\": \"a\".repeat(256), \"photoUrls\": [\"http://example.com/photo1.jpg\"], \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"tags\": [{ \"id\": 1, \"name\": \"tag1\" }], \"status\": \"available\" }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint with the JSON body","expected_result":"Response status code is `400 Bad Request` or an appropriate error message indicating that a field exceeds the maximum length","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response contains an error message indicating that a field exceeds the maximum allowed length","data":"Check response content","steps":[]}],"tags":["Create Pet","Pet Store","API","Functional"],"params":[],"is_muted":"no"},{"id":16,"title":"Create a New Pet with Null Values","description":"Verifies the API's behavior when required fields in the payload contain null values","preconditions":"The server is running, and the `/pet` endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with null values in required fields","expected_result":"JSON object is correctly created with null values","data":"{ \"id\": null, \"name\": null, \"photoUrls\": [null], \"category\": { \"id\": null, \"name\": null }, \"tags\": [null], \"status\": null }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint with the JSON body","expected_result":"Response status code is 400 Bad Request or an appropriate error message indicating that null values are not allowed.","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response contains an error message indicating that null values are not allowed in required fields","data":"Check response content","steps":[]}],"tags":["Create Pet","Functional","API","Pet Store"],"params":[],"is_muted":"no"},{"id":17,"title":"Create a New Pet with Invalid Category ID","description":"This test case examines the API's response when an invalid category ID is provided in the payload","preconditions":"The server is running, and the `/pet` endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with an invalid category ID","expected_result":"JSON object is correctly created with an invalid category ID","data":"{ \"id\": 123, \"name\": \"Fido\", \"photoUrls\": [\"http://example.com/photo1.jpg\"], \"category\": { \"id\": -1, \"name\": \"Invalid Category\" }, \"tags\": [{ \"id\": 1, \"name\": \"tag1\" }], \"status\": \"available\" }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint with the JSON body","expected_result":"Response status code is 400 Bad Request or an appropriate error message indicating that the category ID is invalid","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response contains an error message indicating that the category ID is invalid.","data":"Check response content","steps":[]}],"tags":["Registration","API"],"params":[],"is_muted":"no"},{"id":18,"title":"Create a New Pet with Valid Tags","description":"Verifies that the pet is successfully created and the tags are properly associated","preconditions":"The server is running, and the `/pet` endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with valid tags","expected_result":"JSON object is correctly created with valid tags","data":"{ \"id\": 123, \"name\": \"Fido\", \"photoUrls\": [\"http://example.com/photo1.jpg\"], \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"tags\": [{ \"id\": 1, \"name\": \"tag1\" }], \"status\": \"available\" }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint with the JSON body","expected_result":"Response status code is 200 OK, and the pet is successfully created with the provided tags","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response confirms that the pet was created with the correct tags","data":"Check response content","steps":[]}],"tags":["Create Pet","Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":19,"title":"Create a New Pet with Invalid Status","description":"This test case checks the API's response when an invalid status value is provided in the payload","preconditions":"The server is running, and the `/pet` endpoint is available.","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with an invalid status value","expected_result":"JSON object is correctly created with an invalid status","data":"{ \"id\": 123, \"name\": \"Fido\", \"photoUrls\": [\"http://example.com/photo1.jpg\"], \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"tags\": [{ \"id\": 1, \"name\": \"tag1\" }], \"status\": \"invalidStatus\" }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint with the JSON body","expected_result":"Response status code is 400 Bad Request or an appropriate error message indicating that the status is invalid","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response contains an error message indicating that the status value is invalid.","data":"Check response content","steps":[]}],"tags":["Create Pet","Pet Store","API","Functional"],"params":[],"is_muted":"no"},{"id":20,"title":"Create a New Pet with Special Characters in Name","description":"This test case checks whether the API accepts or rejects special characters and returns an appropriate response","preconditions":"The server is running, and the `/pet` endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with special characters in the name","expected_result":"JSON object is correctly created with special characters in the name","data":"{ \"id\": 123, \"name\": \"!@#%&\\*\", \"photoUrls\": [\"http://example.com/photo1.jpg\"], \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"tags\": [{ \"id\": 1, \"name\": \"tag1\" }], \"status\": \"available\" }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint with the JSON body","expected_result":"Response status code is 200 OK, and the pet is successfully created with the provided name","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response confirms that the pet was created with the name containing special characters","data":"Check response content","steps":[]}],"tags":["Create Pet","Functional","Registration","API"],"params":[],"is_muted":"no"},{"id":21,"title":"Create a New Pet with Empty tags Array","description":"This test case evaluates the API response when the tags array is empty","preconditions":"The server is running, and the `/pet` endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with an empty tags array","expected_result":"JSON object is correctly created with an empty tags array","data":"{ \"id\": 123, \"name\": \"Fido\", \"photoUrls\": [\"http://example.com/photo1.jpg\"], \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"tags\": [], \"status\": \"available\" }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint with the JSON body","expected_result":"Response status code is 200 OK, and the pet is successfully created with an empty tags array","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response confirms that the pet was created with an empty tags array","data":"Check response content","steps":[]}],"tags":["Create Pet","Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":22,"title":"Create a New Pet with Multiple Photo URLs","description":"This test case confirms that the API supports the creation of a new pet with multiple photo URLs","preconditions":"The server is running, and the `/pet` endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with multiple photo URLs","expected_result":"JSON object is correctly created with multiple photo URLs","data":"{ \"id\": 123, \"name\": \"Fido\", \"photoUrls\": [\"http://example.com/photo1.jpg\", \"http://example.com/photo2.jpg\"], \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"tags\": [{ \"id\": 1, \"name\": \"tag1\" }], \"status\": \"available\" }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint with the JSON body","expected_result":"Response status code is 200 OK, and the pet is successfully created with the provided photo URLs","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response confirms that the pet was created with multiple photo URLs","data":"Check response content","steps":[]}],"tags":["Create Pet","Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":23,"title":"Create a New Pet with Minimum Required Fields","description":null,"preconditions":"The server is running, and the /pet endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"other","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with only the minimum required fields","expected_result":"JSON object is correctly created with only the minimum required fields","data":"{ \"id\": 123, \"name\": \"Fido\", \"photoUrls\": [\"http://example.com/photo1.jpg\"] }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint with the JSON body","expected_result":"Response status code is 200 OK, and the pet is successfully created with the provided minimum fields","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response confirms that the pet was created with only the minimum required fields.","data":"Check response content","steps":[]}],"tags":["Create Pet","Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":24,"title":"Create a New Pet with XML Payload and Response","description":"This test case verifies that the API can correctly process and respond to a request where both the request body and response are in XML format.","preconditions":"The server is running, and the `/pet` endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create an XML object for the pet with valid data","expected_result":"XML object is correctly created","data":"\\<Pet> \\<id>123\\</id> \\<name>Rover\\</name> \\<photoUrls> \\<photoUrl>http://example.com/photo1.jpg\\</photoUrl> \\</photoUrls> \\<category> \\<id>1\\</id> \\<name>Dogs\\</name> \\</category> \\<tags> \\<tag> \\<id>1\\</id> \\<name>tag1\\</name> \\</tag> \\</tags> \\<status>available\\</status> \\</Pet>","steps":[]},{"position":3,"action":"Send a POST request to the endpoint with the XML body","expected_result":"Response status code is 200 OK, indicating the pet was successfully created","data":"Execute the POST request with the XML payload","steps":[]},{"position":4,"action":"Verify the response body is in XML format","expected_result":"The response contains an XML object confirming the pet creation","data":"Check the response content","steps":[]}],"tags":[],"params":[],"is_muted":"no"}]},{"id":1,"title":"Uploads an image","description":null,"preconditions":null,"suites":[],"cases":[{"id":1,"title":"Valid Pet ID with Image Upload","description":"Verify that the image upload functionality works correctly with a valid Pet ID and a valid image file.","preconditions":"Valid Pet ID exists in the database","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet/](https://petstore.swagger.io/v2/pet/123123){ValidPetID}","steps":[]},{"position":2,"action":"Set the additional metadata","expected_result":"Metadata is correctly set","data":"Test Metadata","steps":[]},{"position":3,"action":"Choose a valid image file","expected_result":"Image file is selected","data":"Valid image - JPG","steps":[]},{"position":4,"action":"Send a POST request to the endpoint","expected_result":"Response status code is 200 OK","data":"Execute the POST request","steps":[]},{"position":5,"action":"Verify the response body","expected_result":"Response contains success message and details about the uploaded image","data":"Check response content","steps":[]},{"position":6,"action":"Retrieve the pet details using GET request","expected_result":"Response status code is 200 OK, the uploaded image is associated with the pet","data":"Execute the GET request for valid pet ID","steps":[]}],"tags":["Registration","API","Functional","Image Upload","Pet Store"],"params":[],"is_muted":"no"},{"id":2,"title":"Invalid Pet ID (Non-Existent)","description":"Verify that the system returns an error when trying to upload an image for a non-existent pet ID.","preconditions":"Non-existent Pet ID","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL with a non-existent pet id","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet/{](https://petstore.swagger.io/v2/pet/{ValidPetID})non-existent ID[}](https://petstore.swagger.io/v2/pet/{ValidPetID})","steps":[]},{"position":2,"action":"Set the metadata","expected_result":"Metadata is correctly set","data":"Test metadata","steps":[]},{"position":3,"action":"Choose a valid image file","expected_result":"Image file is selected","data":"valid image jpg","steps":[]},{"position":4,"action":"Send a `POST` request to the endpoint","expected_result":"Response status code is `404 Not Found`","data":"Execute the POST request","steps":[]},{"position":5,"action":"Verify the response body","expected_result":"Response contains error message indicating that the pet ID does not exist","data":"Check response content","steps":[]}],"tags":["API","Image Upload","Functional","Negativ","Pet Store"],"params":[],"is_muted":"no"},{"id":3,"title":"Invalid Pet ID (String Value)","description":"Verify that the system returns an error when trying to upload an image with a pet ID of invalid type (string)","preconditions":"Invalid Pet ID (string type)","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL with an invalid ID","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet/](https://petstore.swagger.io/v2/pet/{ValidPetID}){StringPetID}","steps":[]},{"position":2,"action":"Set the additional metadata","expected_result":"Metadata is correctly set","data":"Test Metadata","steps":[]},{"position":3,"action":"Choose a valid image file","expected_result":"Image file is selected","data":"Valid image - JPG","steps":[]},{"position":4,"action":"Send a POST request to the endpoint","expected_result":"Response status code is `400 Bad Request`","data":"Execute the POST request","steps":[]},{"position":5,"action":"Verify the response body","expected_result":"Response contains error message indicating that the pet ID is invalid","data":"Check response content","steps":[]}],"tags":["Negativ","Pet Store","Functional","API","Image Upload"],"params":[],"is_muted":"no"},{"id":4,"title":"Missing Pet ID","description":"Verify that the system returns an error when trying to upload an image without providing a pet ID.","preconditions":"Missing Pet ID","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL without pet ID","expected_result":"The URL is set with missing pet ID","data":"Omit pet ID","steps":[]},{"position":2,"action":"Set the additional metadata","expected_result":"Metadata is correctly set","data":"Test Metadata","steps":[]},{"position":3,"action":"Choose a valid image file","expected_result":"Image file is selected","data":"Valid image - JPG","steps":[]},{"position":4,"action":"Send a POST request to the endpoint","expected_result":"Response status code is 404 not found","data":"Execute the POST request","steps":[]},{"position":5,"action":"Verify the response body","expected_result":"Response contains error message indicating that the pet ID is missing","data":"Check response content","steps":[]}],"tags":["Negativ","Image Upload","API","Functional"],"params":[],"is_muted":"no"},{"id":5,"title":"Valid Pet ID with Additional Metadata","description":"Verify that an image can be uploaded for a pet with a valid pet ID and additional metadata","preconditions":"Valid Pet ID exists in the database","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet/{ValidPetID}](https://petstore.swagger.io/v2/pet/{ValidPetID})","steps":[]},{"position":2,"action":"Set the additional metadata with relevant information","expected_result":"Metadata is correctly set","data":"Test Metadata","steps":[]},{"position":3,"action":"Choose a valid image file","expected_result":"Image file is selected","data":"Valid image - JPG","steps":[]},{"position":4,"action":"Send a POST request to the endpoint","expected_result":"Response status code is 200 OK","data":"Execute the POST request","steps":[]},{"position":5,"action":"Verify the response body","expected_result":"Response contains success message and details about the uploaded image and metadata","data":"Check response content","steps":[]},{"position":6,"action":"Retrieve the pet details using GET request","expected_result":"The uploaded image and additional metadata are associated with the pet","data":"Execute the GET request for valid pet ID","steps":[]}],"tags":["Functional","API","Smoke"],"params":[],"is_muted":"no"},{"id":6,"title":"Valid Pet ID without Additional Metadata","description":"Verify that an image can be uploaded for a pet with a valid pet ID without additional metadata.","preconditions":"Valid Pet ID exists in the database","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet/{ValidPetID}](https://petstore.swagger.io/v2/pet/{ValidPetID})","steps":[]},{"position":2,"action":"Choose a valid image file","expected_result":"Image file is selected","data":"Valid image - JPG","steps":[]},{"position":3,"action":"Send a POST request to the endpoint","expected_result":"Response status code is 200 OK","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response contains success message and details about the uploaded image","data":"Check the response content","steps":[]},{"position":5,"action":"Retrieve the pet details using GET request","expected_result":"Response status code is 200 OK, the uploaded image is associated with the pet","data":"Execute the GET request for valid pet ID","steps":[]}],"tags":["Pet Store","API","Smoke","Image Upload"],"params":[],"is_muted":"no"},{"id":7,"title":"Missing Image File","description":"Verify that the API handles a scenario where the image file is not provided during an upload request for a valid pet ID.","preconditions":"Valid Pet ID exists in the database","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet/{ValidPetID}](https://petstore.swagger.io/v2/pet/{ValidPetID})","steps":[]},{"position":2,"action":"Set the additional metadata","expected_result":"Metadata is correctly set","data":"Test Metadata","steps":[]},{"position":3,"action":"Do not provide any file","expected_result":"The file parameter is not set","data":"Leave the file parameter empty","steps":[]},{"position":4,"action":"Send a `POST` request to the endpoint without a file","expected_result":"Response status code is `400 Bad Request` or an appropriate error message indicating that the file is missing.","data":"Execute the POST request","steps":[]},{"position":5,"action":"Verify the response body","expected_result":"The response should indicate that an image file is required for the upload","data":"Check the response content","steps":[]}],"tags":["Negativ","Pet Store","Functional","API","Image Upload"],"params":[],"is_muted":"no"},{"id":8,"title":"Unsupported File Format","description":"Verify that the API correctly handles the scenario when an unsupported file format is uploaded for a valid pet ID","preconditions":"Valid Pet ID exists in the database.\nA file in an unsupported format is available for upload exe, txt","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet/{ValidPetID}](https://petstore.swagger.io/v2/pet/{ValidPetID})","steps":[]},{"position":2,"action":"Set the additional metadata","expected_result":"Metadata is correctly set","data":"Test Metadata","steps":[]},{"position":3,"action":"Choose a file with an unsupported format","expected_result":"File in an unsupported format is selected","data":"Upload {Unsupported File}","steps":[]},{"position":4,"action":"Send a `POST` request to the endpoint with the unsupported file format","expected_result":"Response status code is 415 Unsupported Media Type.\nOr an appropriate error message indicating that the file format is not supported.","data":"Execute the POST request","steps":[]},{"position":5,"action":"Verify the response body","expected_result":"The response should include an error message stating that the uploaded file format is not supported by the API.","data":"Check the response content","steps":[]}],"tags":["Pet Store","API","Negativ","File Upload"],"params":[],"is_muted":"no"}]},{"id":6,"title":"Updates  a pet in the store with form data","description":null,"preconditions":null,"suites":[],"cases":[{"id":26,"title":"Update Pet with Missing Name Field","description":"This test case checks how the API handles an update request when the pet's name field is missing","preconditions":"The server is running, and the /pet endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"other","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet without the `name` field.","expected_result":"JSON object is correctly created without the `name` field.","data":"{ \"id\": 123, \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"photoUrls\": [\"http://example.com/photo1.jpg\"], \"tags\": [{ \"id\": 1, \"name\": \"tag1\" }], \"status\": \"available\" }","steps":[]},{"position":3,"action":"POST request to the endpoint with the JSON body","expected_result":"Response status code is 400 Bad Request or an appropriate error message indicating the `name` field is required.","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response contains an error message indicating that the `name` field is missing.","data":"Check response content","steps":[]}],"tags":["Pet Store","API","Functional","Update"],"params":[],"is_muted":"no"},{"id":27,"title":"Update Pet with Invalid ID","description":"Verify that the API correctly identifies and handles the invalid ID","preconditions":"The server is running, and the /pet endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint UR","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with an invalid ID (string)","expected_result":"JSON object is created with an invalid `ID`","data":"{ \"id\": \"invalid_id\", \"name\": \"Doggie\", \"photoUrls\": [\"http://example.com/photo1.jpg\"], \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"tags\": [{ \"id\": 1, \"name\": \"tag1\" }], \"status\": \"available\" }","steps":[]},{"position":3,"action":"POST request to the endpoint with the JSON body","expected_result":"Response status code is 400 Bad Request or an appropriate error message indicating the `ID` is invalid","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response contains an error message indicating that the `id` is invalid","data":"Check response content","steps":[]}],"tags":["Update","Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":28,"title":"Update Pet with Empty Status Field","description":"This test case assesses how the API responds to an update request where the pet's status field is empty","preconditions":"The server is running, and the /pet endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with an empty `status` field","expected_result":"JSON object is created with an empty `status` field","data":"{ \"id\": 123, \"name\": \"Doggie\", \"photoUrls\": [\"http://example.com/photo1.jpg\"], \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"tags\": [{ \"id\": 1, \"name\": \"tag1\" }], \"status\": \"\" }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint with the JSON body","expected_result":"Response status code is 400 Bad Request or an appropriate error message indicating that the `status` field is required.","data":"Execute the POST request","steps":[]},{"position":4,"action":"erify the response body","expected_result":"Response contains an error message indicating that the `status` field is empty.","data":"Check response content","steps":[]}],"tags":["Update","Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":29,"title":"Update Pet with Invalid Data Types","description":"This test case tests the API's ability to handle invalid data types","preconditions":"The server is running, and the /pet endpoint is available.","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with invalid data types for fields","expected_result":"JSON object is created with invalid data types","data":"{ \"id\": \"invalid_id\", \"name\": 12345, \"photoUrls\": [\"http://example.com/photo1.jpg\"], \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"tags\": [{ \"id\": 1, \"name\": \"tag1\" }], \"status\": \"available\" }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint with the JSON body","expected_result":"Response status code is 400 Bad Request or an appropriate error message indicating that the data types are invalid","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response contains an error message indicating that the data types are invalid.","data":"Check response content","steps":[]}],"tags":["Update","Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":30,"title":"Update Pet with Special Characters in Name","description":"This test case evaluates the API's handling of special characters in the pet's name field during an update request","preconditions":"The server is running, and the /pet endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with special characters in the `name` field","expected_result":"JSON object is created with special characters in the `name`.","data":"{ \"id\": 123, \"name\": \"!@#Doggie$\", \"photoUrls\": [\"http://example.com/photo1.jpg\"], \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"tags\": [{ \"id\": 1, \"name\": \"tag1\" }], \"status\": \"available\" }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint with the JSON body","expected_result":"Response status code is 200 OK or an appropriate error message indicating special characters are not allowed.","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response contains a message indicating whether special characters are allowed or not.","data":"Check response content.","steps":[]}],"tags":["Update","Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":31,"title":"Update Pet with Excessive Length in Fields","description":"This test case checks how the API manages fields that exceed the maximum allowed length during a pet update request","preconditions":"The server is running, and the /pet endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"other","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with a field value exceeding the maximum allowed length (`name` field with 256 characters).","expected_result":"JSON object is correctly created with a field exceeding the maximum length","data":"{ \"id\": 123, \"name\": \"a\".repeat(256), \"photoUrls\": [\"http://example.com/photo1.jpg\"], \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"tags\": [{ \"id\": 1, \"name\": \"tag1\" }], \"status\": \"available\" }","steps":[]},{"position":3,"action":"JSON object is correctly created with a field exceeding the maximum length","expected_result":"Response status code is 400 Bad Request or an appropriate error message indicating that a field exceeds the maximum length","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response contains an error message indicating that a field exceeds the maximum allowed length","data":"Check response content","steps":[]}],"tags":["Update","Functional","API","Pet Store"],"params":[],"is_muted":"no"},{"id":32,"title":"Update Pet with Null Values","description":"It ensures that the API handles null inputs appropriately","preconditions":"The server is running, and the /pet endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with null values for one or more fields","expected_result":"JSON object is created with null values","data":"{ \"id\": null, \"name\": null, \"photoUrls\": [null], \"category\": { \"id\": null, \"name\": null }, \"tags\": [null], \"status\": null }","steps":[]},{"position":3,"action":"nd a POST request to the endpoint with the JSON body","expected_result":"Response status code is 400 Bad Request or an appropriate error message indicating that null values are not allowed","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response contains an error message indicating that null values are not allowed.","data":"Check response content","steps":[]}],"tags":["Update","Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":33,"title":"Update Pet with Duplicate Name","description":"Verifies how the API reacts when a pet update request includes a name that already exists for another pet in the store","preconditions":"The server is running, and the /pet endpoint is available.\nAnother pet with the same name already exists in the store","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"unknown","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with a `name` that already exists","expected_result":"JSON object is created with a duplicate `name`","data":"{ \"id\": 124, \"name\": \"Doggie\", \"photoUrls\": [\"http://example.com/photo2.jpg\"], \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"tags\": [{ \"id\": 2, \"name\": \"tag2\" }], \"status\": \"available\" }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint with the JSON body","expected_result":"Response status code is 200 OK, indicating that the pet was updated, or a 409 Conflict if duplicate names are not allowed","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"The response indicates whether the pet was updated successfully or if a conflict occurred due to the duplicate name","data":"Check response content","steps":[]}],"tags":["Update","Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":34,"title":"Update Pet with Invalid Status","description":"This test case examines how the API responds when an invalid status is provided during a pet update request","preconditions":"The server is running, and the /pet endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet)","steps":[]},{"position":2,"action":"Create a JSON object for the pet with an invalid `status` value","expected_result":"JSON object is created with an invalid `status`","data":"{ \"id\": 123, \"name\": \"Doggie\", \"photoUrls\": [\"http://example.com/photo1.jpg\"], \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"tags\": [{ \"id\": 1, \"name\": \"tag1\" }], \"status\": \"sold\" }","steps":[]},{"position":3,"action":"Send a POST request to the endpoint with the JSON body","expected_result":"Response status code is 400 Bad Request or an appropriate error message indicating that the `status` is invalid","data":"Execute the POST request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"Response contains an error message indicating that the `status` is invalid and provides the list of acceptable values.","data":"Check response content","steps":[]}],"tags":["Update","Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":35,"title":"Updates a Pet with Form Data (XML)","description":"This test case checks if the API can successfully update a pet's details using form data in XML format","preconditions":"The server is running, and the /pet endpoint is available.\nThe pet to be updated already exists in the store","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet){valid pet ID}","steps":[]},{"position":2,"action":"Set the content type to `application/xml`","expected_result":"The content type is correctly set","data":"Set the content type to `application/xml`","steps":[]},{"position":3,"action":"Create an XML object with the updated pet data","expected_result":"XML object is correctly created with updated data","data":"<Pet\\> <id\\>12345</id\\> <name\\>UpdatedDoggie</name\\> <category\\> <id\\>1</id\\> <name\\>Dogs</name\\> </category\\> <photoUrls\\> <photoUrl\\>http://example\\.com/photo1\\.jpg</photoUrl\\> </photoUrls\\> <tags\\> <tag\\> <id\\>1</id\\> <name\\>tag1</name\\> </tag\\> </tags\\> <status\\>sold</status\\> </Pet>","steps":[]},{"position":4,"action":"Send a `POST` request to the endpoint with the XML body","expected_result":"Response status code is `200 OK`, indicating that the pet has been updated.","data":"Execute the `POST` request","steps":[]},{"position":5,"action":"Verify the response body in XML format","expected_result":"Response contains the updated pet data in XML format, confirming the successful update.","data":"Check the response content","steps":[]}],"tags":["Update","Functional","API","Pet Store"],"params":[],"is_muted":"no"},{"id":117,"title":"Updates a Pet with Form Data (JSON)","description":"This test case checks if the API can successfully update a pet's details using form data in JSON format","preconditions":"The server is running, and the /pet endpoint is available.\nThe pet to be updated already exists in the store","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet){valid pet ID}","steps":[]},{"position":2,"action":"Set the content type to `application/JSON`","expected_result":"The content type is correctly set","data":"Set the content type to `application/JSON`","steps":[]},{"position":3,"action":"Create an JSON object with the updated pet data","expected_result":"JSON object is correctly created with updated data","data":"{ \"Pet\": { \"id\": 12345, \"name\": \"UpdatedDoggie\", \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"photoUrls\": [ \"http://example.com/photo1.jpg\" ], \"tags\": [ { \"id\": 1, \"name\": \"tag1\" } ], \"status\": \"sold\" }","steps":[]},{"position":4,"action":"Send a `POST` request to the endpoint with the JSON body","expected_result":"Response status code is `200 OK`, indicating that the pet has been updated.","data":"Execute the `POST` request","steps":[]},{"position":5,"action":"Verify the response body in JSON format","expected_result":"Response contains the updated pet data in JSON format, confirming the successful update.","data":"Check the response content","steps":[]}],"tags":["Update","Functional","API","Pet Store"],"params":[],"is_muted":"no"}]}],"cases":[]},{"id":26,"title":"PUT","description":null,"preconditions":null,"suites":[{"id":3,"title":"Update an existing pet","description":null,"preconditions":null,"suites":[],"cases":[{"id":25,"title":"Update Pet with Valid Data","description":"Verifies that the API correctly updates a pet in the store when provided with valid data","preconditions":"A pet with a valid ID exists in the system.\nThe server is running, and the `/pet` endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet){valid ID}","steps":[]},{"position":2,"action":"Create a JSON object with valid data to update the pet's information","expected_result":"The JSON object is correctly created with valid data","data":"{ \"id\": 1, \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"name\": \"UpdatedDoggie\", \"photoUrls\": [ \"http://example.com/dog.jpg\" ], \"tags\": [ { \"id\": 1, \"name\": \"friendly\" } ], \"status\": \"available\" }","steps":[]},{"position":3,"action":"Send a PUT request to the endpoint with the JSON body","expected_result":"Response status code is 200 OK","data":"Execute the PUT request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"The response should contain the updated pet details, reflecting the changes made.","data":"Check the response content","steps":[]},{"position":5,"action":"Fetch the pet details using a GET request to ensure the update was successful","expected_result":"The pet's details should match the updated data","data":"Execute the GET request for the pet's ID","steps":[]}],"tags":["Update","Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":73,"title":"Update Pet with Invalid Data","description":"Verify that the system handles attempts to update a pet with invalid data","preconditions":"The `/pet` endpoint is accessible.","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"unknown","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/pet`","expected_result":"The URL is correctly set","data":"the URL is set as provided","steps":[]},{"position":2,"action":"Create a JSON object with invalid pet data missing required fields","expected_result":"The JSON object is created, but it contains invalid data","data":"{ \"id\": 1, \"category\": { \"id\": 1, \"name\": \"\" }, \"name\": \"\", \"photoUrls\": [], \"tags\": [], \"status\": \"\" }","steps":[]},{"position":3,"action":"Send a PUT request to the `/pet` endpoint with the invalid JSON object in the request body.","expected_result":"Response status code is `400 Bad Request`","data":"Execute the request","steps":[]},{"position":4,"action":"Verify the error message in the response body","expected_result":"The response contains an error message indicating that the provided data is invalid.","data":"Inspect the response content.","steps":[]}],"tags":["Update","Functional","API"],"params":[],"is_muted":"no"},{"id":74,"title":"Update Pet with Non-existent ID","description":"Verify that the system returns an error when attempting to update a pet that does not exist.","preconditions":"The `/pet` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/pet`","expected_result":"The URL is correctly set","data":"the URL is set as provided","steps":[]},{"position":2,"action":"Create a JSON object with a non-existent pet ID.","expected_result":"The JSON object is created with a non-existent pet ID","data":"{ \"id\": 9999, \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"name\": \"GhostDog\", \"photoUrls\": [ \"http://example.com/dog.jpg\" ], \"tags\": [ { \"id\": 1, \"name\": \"invisible\" } ], \"status\": \"available\" }","steps":[]},{"position":3,"action":"Send a PUT request to the `/pet` endpoint with the JSON object in the request body.","expected_result":"Response status code is `404 Not Found`","data":"Execute the request","steps":[]},{"position":4,"action":"Verify the error message in the response body","expected_result":"The response contains an error message indicating that the pet ID does not exist.","data":"Inspect the response content","steps":[]}],"tags":["Update","API","Pet Store"],"params":[],"is_muted":"no"},{"id":75,"title":"Update Pet with Null Fields","description":"Verify that the system handles attempts to update a pet with `null` fields.","preconditions":"The `/pet` endpoint is accessible.","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/pet`","expected_result":"The URL is correctly set","data":"the URL is set as provided","steps":[]},{"position":2,"action":"Create a JSON object with `null` values for some fields","expected_result":"The JSON object is created, but it contains `null` values.","data":"{ \"id\": 1, \"category\": { \"id\": null, \"name\": null }, \"name\": null, \"photoUrls\": null, \"tags\": null, \"status\": null }","steps":[]},{"position":3,"action":"Send a PUT request to the `/pet` endpoint with the JSON object in the request body.","expected_result":"Response status code is `400 Bad Request`","data":"Execute the request","steps":[]},{"position":4,"action":"Verify the error message in the response body","expected_result":"The response contains an error message indicating that the provided data is invalid due to `null` values","data":"Inspect the response content","steps":[]}],"tags":["Update","API","Functional"],"params":[],"is_muted":"no"},{"id":76,"title":"Update Pet with Missing ID","description":"Verify that the system handles attempts to update a pet when the ID is missing from the JSON object","preconditions":"The `/pet` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/pet`","expected_result":"The URL is correctly set","data":"the URL is set as provided","steps":[]},{"position":2,"action":"Create a JSON object without the pet ID.","expected_result":"The JSON object is created, but it is missing the pet ID","data":"{ \"category\": { \"id\": 1, \"name\": \"Dogs\" }, \"name\": \"DogWithoutID\", \"photoUrls\": [ \"http://example.com/dog.jpg\" ], \"tags\": [ { \"id\": 1, \"name\": \"friendly\" } ], \"status\": \"available\" }","steps":[]},{"position":3,"action":"Send a PUT request to the `/pet` endpoint with the JSON object in the request body","expected_result":"Response status code is `400 Bad Request`","data":"Execute the request","steps":[]},{"position":4,"action":"Verify the error message in the response body","expected_result":"The response contains an error message indicating that the pet ID is required.","data":"Inspect the response content","steps":[]}],"tags":["Update","API","Functional"],"params":[],"is_muted":"no"}]}],"cases":[]},{"id":37,"title":"DELETE","description":null,"preconditions":null,"suites":[{"id":38,"title":"Delete by ID","description":null,"preconditions":null,"suites":[],"cases":[{"id":87,"title":"Delete a Pet with Valid ID","description":"Verify that a pet is successfully deleted when a valid pet ID is provided","preconditions":"The `/pet/{petId}` endpoint is accessible.\nA pet with the provided ID exists in the store.\nAn `api_key` is required and available.","postconditions":null,"priority":"medium","severity":"normal","type":"other","behavior":"positive","automation":"automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/pet/{petId}`","expected_result":"The URL is correctly set with the valid pet ID","data":"[https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet/1111) {valid pet ID=123}","steps":[]},{"position":2,"action":"Add the `api_key` to the request header","expected_result":"The `api_key` is correctly added to the request header","data":"Set the header `api_key` with a valid key value","steps":[]},{"position":3,"action":"Send a DELETE request to the `/pet/{petId}` endpoint","expected_result":"Response status code is `200 OK`","data":"Execute the request with the valid `petId=123` and the `api_key`","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"The response confirms that the pet with ID `123` has been successfully deleted.","data":"Inspect the response content","steps":[]},{"position":5,"action":"Attempt to retrieve the deleted pet by ID","expected_result":"Response status code is `404 Not Found`, confirming that the pet has been deleted.","data":"Send a GET request to `/pet/{pet Id = 123}` with the same pet ID","steps":[]}],"tags":["Pet Store","API","Functional"],"params":[],"is_muted":"no"},{"id":88,"title":"Delete a Pet with Invalid ID","description":"Verify that the system handles an invalid pet ID appropriately when attempting to delete.","preconditions":"The `/pet/{petId}` endpoint is accessible.\nAn `api_key` is required and available","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/pet/{petId}`","expected_result":"The URL is correctly set with the invalid pet ID","data":"[https://petstore.swagger.io/v2/pet/](https://petstore.swagger.io/v2/pet/)Provide an invalid or non-existent pet ID in the path parameter","steps":[]},{"position":2,"action":"Add the `api_key` to the request header","expected_result":"The `api_key` is correctly added to the request header","data":"Set the header `api_key` with a valid key value","steps":[]},{"position":3,"action":"Send a DELETE request to the `/pet/{petId}` endpoint","expected_result":"Response status code is `404 Not Found`","data":"Execute the request with the invalid `petId` and the `api_key`","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"The response contains an error message indicating that the pet ID is invalid or does not exist","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","API"],"params":[],"is_muted":"no"},{"id":89,"title":"Delete a Pet with Missing ID","description":"Verify that the system returns an error when the pet ID is missing in the request","preconditions":"The `/pet/{petId}` endpoint is accessible.\nAn `api_key` is required and available.","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Attempt to send a DELETE request to the `/pet/` endpoint without providing a `petId`.","expected_result":"The request is not sent, and an error is returned, indicating that the pet ID is required.","data":"Omit the pet ID in the path parameter","steps":[]},{"position":2,"action":"Verify the error response","expected_result":"The response contains an error message indicating that the pet ID is missing or the URL is incorrect","data":"Inspect the response content","steps":[]}],"tags":["API","Pet Store"],"params":[],"is_muted":"no"},{"id":90,"title":"Delete a Pet with Invalid API Key","description":"Verify that the system returns an error when an invalid API key is provided","preconditions":"The `/pet/{petId}` endpoint is accessible.\nA valid pet ID exists in the store","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/pet/{petId}`","expected_result":"The URL is correctly set with the valid pet ID","data":"Provide a valid pet ID in the path parameter,`pet Id=123`","steps":[]},{"position":2,"action":"Add an invalid `api_key` to the request header","expected_result":"The `api_key` is added but is invalid","data":"Set the header `api_key` with an invalid key value, `api_key=invalidKey`","steps":[]},{"position":3,"action":"Send a DELETE request to the `/pet/{petId}` endpoint","expected_result":"Response status code is `403 Forbidden` or `401 Unauthorized`","data":"Execute the request with the valid `petId=123` and the invalid `api_key`","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"The response contains an error message indicating that the API key is invalid or the user is unauthorized","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","API"],"params":[],"is_muted":"no"},{"id":91,"title":"Delete a Pet with Missing API Key","description":"Verify that the system returns an error when the API key is missing from the request.","preconditions":"* The `/pet/{petId}` endpoint is accessible.\n* A valid pet ID exists in the store","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/pet/{petId}`","expected_result":"The URL is correctly set with the valid pet ID","data":"Provide a valid pet ID in the path parameter, `petId=123`","steps":[]},{"position":2,"action":"Omit the `api_key` from the request header","expected_result":"The request is sent without an API key","data":"Do not include the `api_key` in the header","steps":[]},{"position":3,"action":"Send a DELETE request to the `/pet/{petId}` endpoint","expected_result":"Response status code is `403 Forbidden` or `401 Unauthorized`","data":"Execute the request with the valid `petId=123` but without the `api_key`","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"The response contains an error message indicating that the API key is missing or the user is unauthorized","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","API"],"params":[],"is_muted":"no"}]}],"cases":[]}],"cases":[]},{"id":23,"title":"STORE Endpoints","description":null,"preconditions":null,"suites":[{"id":27,"title":"GET","description":null,"preconditions":null,"suites":[{"id":8,"title":"Returns pet inventories by status","description":null,"preconditions":null,"suites":[],"cases":[{"id":45,"title":"Verify Inventory Count by Status (Available Pets)","description":"Verify that the system returns the correct inventory count for pets with the status \"available.\"","preconditions":"The server is running, and the `/store/inventory` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2](https://petstore.swagger.io/v2/pet)`/store/inventory`","steps":[]},{"position":2,"action":"Send a GET request to the `/store/inventory` endpoint","expected_result":"Response status code is 200 OK","data":"Execute the GET request","steps":[]},{"position":3,"action":"Verify the response body contains the count of available pets","expected_result":"The response body contains the correct count for \"available\" status","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":46,"title":"Verify Inventory Count by Status (Pending Pets)","description":"Verify that the system returns the correct inventory count for pets with the status \"pending.\"","preconditions":"The server is running, and the `/store/inventory` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/store/inventory`","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/store/inventory](https://petstore.swagger.io/v2/pet/store/inventory)","steps":[]},{"position":2,"action":"Send a GET request to the `/store/inventory` endpoint","expected_result":"Response status code is 200 OK","data":"Execute the GET request","steps":[]},{"position":3,"action":"Verify the response body contains the count of pending pets","expected_result":"The response body contains the correct count for \"pending\" status","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","API","Functional"],"params":[],"is_muted":"no"},{"id":47,"title":"Verify Inventory Count by Status (Sold Pets)","description":"Verify that the system returns the correct inventory count for pets with the status \"sold.\"","preconditions":"The server is running, and the `/store/inventory` endpoint is accessible.","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/store/inventory](https://petstore.swagger.io/v2/pet/store/inventory)","steps":[]},{"position":2,"action":"Send a GET request to the `/store/inventory` endpoint","expected_result":"Response status code is 200 OK","data":"Execute the GET request","steps":[]},{"position":3,"action":"Verify the response body contains the count of sold pets","expected_result":"The response body contains the correct count for \"sold\" status","data":"Inspect the response content.","steps":[]}],"tags":["Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":48,"title":"Verify Response When No Pets Are Available","description":"Verify the system's response when there are no pets with the status \"available.\"","preconditions":"The server is running, and the `/store/inventory` endpoint is accessible.\nThere are no pets in the system with the status \"available.\"","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/store/inventory](https://petstore.swagger.io/v2/pet/store/inventory)","steps":[]},{"position":2,"action":"Send a GET request to the `/store/inventory` endpoint","expected_result":"Response status code is 200 OK","data":"Execute the GET request","steps":[]},{"position":3,"action":"Verify the response body indicates zero available pets","expected_result":"The response body indicates zero pets with \"available\" status","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","API","Functional"],"params":[],"is_muted":"no"},{"id":49,"title":"Verify Response for an Invalid Status","description":"Verify the system's response when an invalid status is provided in the request","preconditions":"The server is running, and the `/store/inventory` endpoint is accessible.","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/store/inventory](https://petstore.swagger.io/v2/pet/store/inventory)","steps":[]},{"position":2,"action":"Send a GET request to the `/store/inventory` endpoint with an invalid status","expected_result":"Response status code is 400 Bad Request or an appropriate error message","data":"Execute the GET request with an invalid status parameter","steps":[]},{"position":3,"action":"Verify the response body contains an error message for invalid status","expected_result":"The response contains an error message indicating the invalid status","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","API","Functional"],"params":[],"is_muted":"no"},{"id":59,"title":"Returns Pet Inventories by Status","description":"Verify that the system correctly retrieves and displays pet inventories grouped by their status","preconditions":"The server is running, and the `/store/inventory` endpoint is available.\nPets with various statuses ( \"available\", \"pending\", \"sold\") exist in the store","postconditions":"The API should consistently return accurate inventory counts by status","priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2](https://petstore.swagger.io/v2/)/pet/findByStatus","steps":[]},{"position":2,"action":"Send a GET request to the `/store/inventory` endpoint","expected_result":"The response status code is 200 OK","data":"Execute the GET request","steps":[]},{"position":3,"action":"Verify the response content.","expected_result":"The response contains a JSON object with pet inventories grouped by status, \n{ \"available\": 5, \"pending\": 2, \"sold\": 3 }","data":"Check the response body","steps":[]},{"position":4,"action":"Verify the correctness of inventory counts for each status","expected_result":"The counts for each status (available, pending, sold) match the expected values.","data":"Cross-check with the known pet inventory data","steps":[]},{"position":5,"action":"Test the response time","expected_result":"The response time is within acceptable limits less than 200ms","data":"Measure the response time","steps":[]}],"tags":["API","Functional"],"params":[],"is_muted":"no"}]},{"id":10,"title":"Find purchase order by ID","description":null,"preconditions":null,"suites":[],"cases":[{"id":40,"title":"Find Purchase Order by Valid ID","description":"This test case verifies that the system correctly retrieves a purchase order's details using a valid `orderId`.","preconditions":"The server is running, and the `/store/order/{orderId}` endpoint is available.\nThere is an existing purchase order in the system with a valid `orderId`","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set with a valid `orderId`","data":"[https://petstore.swagger.io/v2/store/](https://petstore.swagger.io/v2/store/inventory)order{order ID}","steps":[]},{"position":2,"action":"Send a `GET` request to the endpoin","expected_result":"The response status code is `200 OK`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response contains details of the purchase order, including `orderId`, `petId`, `quantity`, `shipDate`, `status`, and `complete`.","data":"Check the response content","steps":[]},{"position":4,"action":"Verify the data types and values in the response","expected_result":"All fields in the response have correct data types and values matching the existing purchase order in the system","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","API","Functional"],"params":[],"is_muted":"no"},{"id":41,"title":"Find Purchase Order by Invalid ID","description":"This test case verifies that the system returns a `404 Not Found` status when trying to retrieve a purchase order using an invalid `orderId`","preconditions":"The server is running, and the `/store/order/{orderId}` endpoint is available.\nAn invalid `orderId` that does not exist in the system `orderId = 9999`","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set with an invalid `orderId`","data":"[https://petstore.swagger.io/v2/store/](https://petstore.swagger.io/v2/store/inventory)order/`{invalid order id}`","steps":[]},{"position":2,"action":"Send a `GET` request to the endpoint.","expected_result":"The response status code is `404 Not Found`","data":"Execute the GET request","steps":[]},{"position":3,"action":"Verify the response body.","expected_result":"The response contains an error message indicating that the purchase order was not found","data":"Inspect the response content","steps":[]}],"tags":["Functional","API"],"params":[],"is_muted":"no"},{"id":42,"title":"Find Purchase Order by Non-integer ID","description":"This test case verifies that the system returns a `400 Bad Request` status when trying to retrieve a purchase order using a non-integer `orderId`.","preconditions":"The server is running, and the `/store/order/{orderId}` endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"other","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is set with a non-integer `orderId`","data":"[https://petstore.swagger.io/v2/store/](https://petstore.swagger.io/v2/store/inventory)order{non-integer ID}","steps":[]},{"position":2,"action":"Send a `GET` request to the endpoint","expected_result":"The response status code is `400 Bad Request`","data":"Execute The response","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response contains an error message indicating that the `orderId` must be an integer.","data":"Check the response content","steps":[]}],"tags":["Functional","API"],"params":[],"is_muted":"no"},{"id":43,"title":"Find Purchase Order with Missing API Key","description":"This test case verifies that the system returns a `401 Unauthorized` status when trying to retrieve a purchase order without providing an `api_key`.","preconditions":"The server is running, and the `/store/order/{orderId}` endpoint is available","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is set without the `api_key`","data":"[https://petstore.swagger.io/v2/store/](https://petstore.swagger.io/v2/store/inventory)order{order ID}without the `api_key`","steps":[]},{"position":2,"action":"Send a `GET` request to the endpoint.","expected_result":"The response status code is `401 Unauthorized`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the response body.","expected_result":"The response contains an error message indicating that the `api_key` is missing.","data":"Check the response content","steps":[]}],"tags":["API","Functional"],"params":[],"is_muted":"no"},{"id":44,"title":"Find Purchase Order by Boundary ID","description":"This test case verifies that the system correctly handles boundary values","preconditions":"The server is running, and the `/store/order/{orderId}` endpoint is available.\nBoundary values for `orderId` are defined (`orderId = 1` for minimum and `orderId = 10` for maximum)","postconditions":null,"priority":"medium","severity":"normal","type":"other","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set with the minimum boundary value `orderId`","data":"[https://petstore.swagger.io/v2/store/](https://petstore.swagger.io/v2/store/inventory)order{order id /1}","steps":[]},{"position":2,"action":"Send a `GET` request to the endpoint","expected_result":"The response status code is `200 OK`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response contains the details of the purchase order","data":"Check the response content","steps":[]},{"position":4,"action":"Repeat steps 1-3 with the maximum boundary value","expected_result":"The response status code is `200 OK`, and the response contains the details of the purchase order","data":"`orderId = 10`","steps":[]}],"tags":["API","Functional","Boundary Values"],"params":[],"is_muted":"no"}]}],"cases":[]},{"id":28,"title":"POST","description":null,"preconditions":null,"suites":[{"id":9,"title":"Place an order for a pet","description":null,"preconditions":null,"suites":[],"cases":[{"id":50,"title":"Place an Order with Invalid Status Value","description":"Verify that placing an order with an invalid status value returns an error","preconditions":"The server is running, and the `/store/order` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/store/](https://petstore.swagger.io/v2/store/inventory)order{valid ID}","steps":[]},{"position":2,"action":"Prepare a POST request with a valid pet ID but an invalid status value","expected_result":"The request is correctly prepared","data":"{ \"petId\": 1, \"quantity\": 2, \"shipDate\": \"2024-09-01\", \"status\": \"invalid_status\", \"complete\": true }","steps":[]},{"position":3,"action":"Send the POST request","expected_result":"Response status code is 400 Bad Request","data":"Execute the request","steps":[]},{"position":4,"action":"Verify the error message in the response body","expected_result":"The response contains an error message indicating that the status value is invalid.","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","API","Functional"],"params":[],"is_muted":"no"},{"id":51,"title":"Place an Order with Invalid Pet ID","description":"Verify that placing an order with an invalid pet ID returns an error","preconditions":"The server is running, and the `/store/order` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly se","data":"[https://petstore.swagger.io/v2/store/](https://petstore.swagger.io/v2/store/inventory)order{invalid ID}","steps":[]},{"position":2,"action":"Prepare a POST request with an invalid pet ID","expected_result":"The request is correctly prepared","data":"{ \"petId\": 9999, \"quantity\": 2, \"shipDate\": \"2024-09-01\", \"status\": \"placed\", \"complete\": true }","steps":[]},{"position":3,"action":"Send the POST request","expected_result":"Response status code is 404 Not Found or another appropriate error code","data":"Execute the request","steps":[]},{"position":4,"action":"Verify the error message in the response body","expected_result":"The response contains an error message indicating that the pet ID is invalid.","data":"Inspect the response content","steps":[]}],"tags":["API","Functional"],"params":[],"is_muted":"no"},{"id":52,"title":"Place an Order with Missing Quantity Field","description":"Verify that placing an order with a missing quantity field returns an error","preconditions":"The server is running, and the `/store/order` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/store/](https://petstore.swagger.io/v2/store/inventory)order{valid ID}","steps":[]},{"position":2,"action":"Prepare a POST request with a valid pet ID but omit the quantity field","expected_result":"The request is correctly prepared","data":"{ \"petId\": 1, \"shipDate\": \"2024-09-01\", \"status\": \"placed\", \"complete\": true }","steps":[]},{"position":3,"action":"Send the POST request","expected_result":"Response status code is 400 Bad Request","data":"Execute the request","steps":[]},{"position":4,"action":"Verify the error message in the response body","expected_result":"The response contains an error message indicating that the quantity field is required.","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","API","Functional"],"params":[],"is_muted":"no"},{"id":53,"title":"Place an Order with Future Ship Date","description":"Verify that a user can place an order for a pet with a future ship date","preconditions":"The server is running, and the `/store/order` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/store/](https://petstore.swagger.io/v2/store/inventory)order{valid ID}","steps":[]},{"position":2,"action":"Prepare a valid POST request with a valid pet ID and a future ship date","expected_result":"The request is correctly prepared","data":"{ \"petId\": 1, \"quantity\": 2, \"shipDate\": \"2024-12-01\", \"status\": \"placed\", \"complete\": true }","steps":[]},{"position":3,"action":"Send the POST request","expected_result":"Response status code is 200 OK","data":"Execute the request","steps":[]},{"position":4,"action":"Verify the order details in the response body","expected_result":"The response contains the correct order details, including the pet ID, quantity, and future ship date","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":54,"title":"Place an Order with Valid Pet ID","description":"Verify that a user can place an order for a pet with a valid pet ID","preconditions":"The server is running, and the `/store/order` endpoint is accessible.\nThe pet with the given ID exists in the inventory","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/store/](https://petstore.swagger.io/v2/store/inventory)order{valid ID}","steps":[]},{"position":2,"action":"Prepare a valid POST request with a valid pet ID and order details","expected_result":"The request is correctly prepared","data":"{ \"petId\": 1, \"quantity\": 2, \"shipDate\": \"2024-09-01\", \"status\": \"placed\", \"complete\": true }","steps":[]},{"position":3,"action":"Send the POST request","expected_result":"Response status code is 200 OK","data":"Execute the request","steps":[]},{"position":4,"action":"Verify the order details in the response body","expected_result":"The response contains the correct order details, including the pet ID, quantity, and status.","data":"Inspect the response content.","steps":[]}],"tags":["Pet Store","API","Functional"],"params":[],"is_muted":"no"}]}],"cases":[]},{"id":29,"title":"DELETE","description":null,"preconditions":null,"suites":[{"id":11,"title":"Delete purchase order by ID","description":null,"preconditions":null,"suites":[],"cases":[{"id":55,"title":"Delete an Order with Valid ID","description":"Verify that an order can be successfully deleted using a valid order ID","preconditions":"The server is running, and the `/store/order/{orderId}` endpoint is accessible.\nThe order with the specified ID exists in the system","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/store/](https://petstore.swagger.io/v2/store/inventory)order{valid ID}","steps":[]},{"position":2,"action":"Send a DELETE request to the endpoint","expected_result":"Response status code is 200 OK","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the response body for a success message or no content","expected_result":"The response indicates that the order has been successfully deleted","data":"Inspect the response","steps":[]},{"position":4,"action":"Send a GET request to `/store/order/{orderId}` with the same ID to verify","expected_result":"Response status code is 404 Not Found, indicating the order no longer exists.","data":"Execute the GET request","steps":[]}],"tags":["Pet Store","API","Functional"],"params":[],"is_muted":"no"},{"id":56,"title":"Delete an Order with Invalid ID","description":"Verify that attempting to delete an order with an invalid or non-existent order ID returns an error.","preconditions":"The server is running, and the `/store/order/{orderId}` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/store/](https://petstore.swagger.io/v2/store/inventory)order{invalid order ID}","steps":[]},{"position":2,"action":"Send a DELETE request to the endpoint","expected_result":"Response status code is 404 Not Found.","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the error message in the response body","expected_result":"The response contains an error message indicating that the order ID is invalid or does not exist","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","API","Functional"],"params":[],"is_muted":"no"},{"id":57,"title":"Delete an Order with Missing ID","description":"Verify that attempting to delete an order without specifying an order ID returns an error.","preconditions":"The server is running, and the `/store/order/{orderId}` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is incorrectly set","data":"[https://petstore.swagger.io/v2/store/](https://petstore.swagger.io/v2/store/inventory)order{without order ID}","steps":[]},{"position":2,"action":"Send a DELETE request to the endpoint","expected_result":"Response status code is 400 Bad Request","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the error message in the response body","expected_result":"The response contains an error message indicating that the order ID is required.","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","API","Functional"],"params":[],"is_muted":"no"},{"id":58,"title":"Delete an Order with Invalid ID Data Type","description":"Verify that attempting to delete an order with an invalid ID data type a string instead of an integer","preconditions":"The server is running, and the `/store/order/{orderId}` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/store/](https://petstore.swagger.io/v2/store/inventory)order{with an invalid data type order ID}","steps":[]},{"position":2,"action":"Send a DELETE request to the endpoint","expected_result":"Response status code is 400 Bad Request","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the error message in the response body","expected_result":"The response contains an error message indicating that the order ID must be an integer","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","API","Functional"],"params":[],"is_muted":"no"}]}],"cases":[]}],"cases":[]},{"id":24,"title":"USER Endpoints","description":null,"preconditions":null,"suites":[{"id":30,"title":"GET","description":null,"preconditions":null,"suites":[{"id":13,"title":"Get user by user name","description":null,"preconditions":null,"suites":[],"cases":[{"id":60,"title":"Get User by Valid User Name","description":"Verify that retrieving a user by a valid user name returns the correct user details","preconditions":"The server is running, and the `/users/{userName}` endpoint is accessible.\nThe user with the specified user name exists in the database","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2](https://petstore.swagger.io/v2/)/user/{valid username}","steps":[]},{"position":2,"action":"Send a GET request to the endpoint","expected_result":"Response status code is 200 OK","data":"Execute the GET request","steps":[]},{"position":3,"action":"Verify the response body contains the correct user details","expected_result":"The response body contains accurate information for the user {\n \"id\": 9223372036854758000,\n \"username\": \"user\",\n \"firstName\": \"petar\",\n \"lastName\": \"petrovic\",\n \"email\": \"eee@primer\",\n \"password\": \"test\",\n \"phone\": \"1254689\",\n \"userStatus\": 1\n}","data":"Inspect the response content for user details","steps":[]}],"tags":["Functional","API"],"params":[],"is_muted":"no"},{"id":61,"title":"Get User by Invalid User Name","description":"Verify that attempting to retrieve user information with an invalid username returns an error.","preconditions":"The server is running, and the `/user/{username}` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2](https://petstore.swagger.io/v2/)/user/{ invalid username}","steps":[]},{"position":2,"action":"Send a GET request to the endpoint","expected_result":"Response status code is `404 Not Found`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the error message in the response body","expected_result":"The response contains an error message indicating that the user does not exist.","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","API","Functional"],"params":[],"is_muted":"no"},{"id":62,"title":"Get User by User Name with Special Characters","description":"Verify that the system can handle usernames containing special characters","preconditions":"The server is running, and the `/user/{username}` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"other","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2](https://petstore.swagger.io/v2/)/user/{ with a username that includes special characters}","steps":[]},{"position":2,"action":"Send a GET request to the endpoint","expected_result":"Response status code is `200 OK`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the response data","expected_result":"response contains the correct user details","data":"Inspect the response content for user details","steps":[]}],"tags":["Pet Store","API","Functional"],"params":[],"is_muted":"no"},{"id":63,"title":"Get User by User Name with Numeric Input","description":"Verify that the system can handle usernames that are entirely numeric","preconditions":"The server is running, and the `/user/{username}` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"unknown","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2](https://petstore.swagger.io/v2/)/user/{ numeric username }","steps":[]},{"position":2,"action":"Send a GET request to the endpoint","expected_result":"Response status code is `200 OK` if the numeric username exists or `404 Not Found` if it does not.","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the response data","expected_result":"If the user exists, the response contains the correct user details. If the user does not exist, the response contains an error message indicating that the user was not found.","data":"Verify the response data","steps":[]}],"tags":["Pet Store","API","Functional"],"params":[],"is_muted":"no"},{"id":64,"title":"Get User by User Name with Empty User Name","description":"Verify that the system returns an error when trying to retrieve a user with an empty username.","preconditions":"The server is running, and the `/user/{username}` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set, but the username is empty","data":"[https://petstore.swagger.io/v2](https://petstore.swagger.io/v2/)/user/{ with an empty username}","steps":[]},{"position":2,"action":"Send a GET request to the endpoint","expected_result":"Response status code is `404 Not Found`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the error message in the response body","expected_result":"The response contains an error message indicating that the username is required or cannot be empty.","data":"Inspect the response content","steps":[]}],"tags":["Functional","API"],"params":[],"is_muted":"no"}]},{"id":17,"title":"Logs out current logged in user session","description":null,"preconditions":null,"suites":[],"cases":[{"id":65,"title":"Log Out with Active Session","description":"Verify that a user can successfully log out when an active session exists","preconditions":"The user is currently logged in, and the `/user/logout` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL is correctly set","data":"[https://petstore.swagger.io/v2/user/logout](https://petstore.swagger.io/v2/user/logout)","steps":[]},{"position":2,"action":"Send a GET request to the `/user/logout` endpoint","expected_result":"Response status code is `200 OK`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the response message","expected_result":"The response contains a message confirming that the user has been logged out successfully.","data":"Inspect the response content","steps":[]},{"position":4,"action":"Attempt to access a protected endpoint after logout","expected_result":"Response status code is `401 Unauthorized` or `403 Forbidden`","data":"Send a request to any endpoint that requires authentication","steps":[]}],"tags":["Logout","API"],"params":[],"is_muted":"no"},{"id":66,"title":"Logout with No Active Session","description":"Verify that the system returns an appropriate error when trying to log out with no active session.","preconditions":"he user is not logged in, or the session has already expired","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"is-not-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user/logout`","expected_result":"The URL is correctly set","data":"None","steps":[]},{"position":2,"action":"GET request to the `/user/logout` endpoint","expected_result":"Response status code is `401 Unauthorized` or `400 Bad Request`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the response message","expected_result":"The response contains an error message indicating that there is no active session or that the request is unauthorized.","data":"Inspect the response content","steps":[]}],"tags":["Logout","API","Functional"],"params":[],"is_muted":"no"},{"id":67,"title":"Log Out after Already Logged Out","description":"Verify that the system correctly handles attempts to log out when the user has already logged out","preconditions":"The user has already logged out","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user/logout`","expected_result":"The URL is correctly set.","data":"None","steps":[]},{"position":2,"action":"Send a GET request to the `/user/logout` endpoint","expected_result":"Response status code is `401 Unauthorized` or `400 Bad Request`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the response message","expected_result":"The response contains an error message indicating that the session is no longer valid or that the user is already logged out","data":"Inspect the response content","steps":[]}],"tags":["Logout","API"],"params":[],"is_muted":"no"}]},{"id":16,"title":"Logs user into the system","description":null,"preconditions":null,"suites":[],"cases":[{"id":69,"title":"Log in with Valid Credentials","description":"Verify that a user can successfully log in with valid credentials","preconditions":"The server is running, and the `/user/login` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL and parameters are correctly set","data":"[https://petstore.swagger.io/v2/user/login?username=user&password=user](https://petstore.swagger.io/v2/user/login?username=user&password=user)","steps":[]},{"position":2,"action":"Send a GET request to the endpoint","expected_result":"Response status code is `200 OK`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the response body for a success message and token","expected_result":"The response contains a success message and an authentication token","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":70,"title":"Log in with Invalid Password","description":"Verify that attempting to log in with an incorrect password returns an error","preconditions":"The server is running, and the `/user/login` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL and parameters are correctly set","data":"[https://petstore.swagger.io/v2/user/login](https://petstore.swagger.io/v2/user/login){valid `username` and an invalid `password`}","steps":[]},{"position":2,"action":"Send a GET request to the endpoint","expected_result":"Response status code is `401 Unauthorized`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the error message in the response body","expected_result":"The response contains an error message indicating that the password is incorrect","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","API","Functional"],"params":[],"is_muted":"no"},{"id":71,"title":"Log in with Missing Username","description":"Verify that attempting to log in without providing a username returns an error","preconditions":"The server is running, and the `/user/login` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL and parameters are correctly set","data":"[https://petstore.swagger.io/v2/user/login](https://petstore.swagger.io/v2/user/login){Omit the `username` parameter, only include `password: Pass`}","steps":[]},{"position":2,"action":"Send a GET request to the endpoint","expected_result":"Response status code is `400 Bad Request`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the error message in the response body","expected_result":"The response contains an error message indicating that the username is missing","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","Functional","API"],"params":[],"is_muted":"no"},{"id":72,"title":"Log in with Missing Password","description":"Verify that attempting to log in without providing a password returns an error","preconditions":"The server is running, and the `/user/login` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL","expected_result":"The URL and parameters are correctly set","data":"[https://petstore.swagger.io/v2/user/login](https://petstore.swagger.io/v2/user/login){Omit the `password` parameter, only include `username: valid user name`}","steps":[]},{"position":2,"action":"Send a GET request to the endpoint","expected_result":"Response status code is `400 Bad Request`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the error message in the response body","expected_result":"The response contains an error message indicating that the password is missing.","data":"Inspect the response content","steps":[]}],"tags":["Pet Store","API","Functional"],"params":[],"is_muted":"no"}]}],"cases":[]},{"id":31,"title":"POST","description":null,"preconditions":null,"suites":[{"id":19,"title":"Create user","description":null,"preconditions":null,"suites":[],"cases":[{"id":107,"title":"Create a User with Valid Data","description":"Verify that a user is successfully created when valid data is provided in the request body.","preconditions":"The `/user` endpoint is accessible.\nThe server is running and ready to accept requests.\nThe user is logged in","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user`","expected_result":"The URL is correctly set, and the request body is properly formatted","data":"Provide a valid JSON object representing the user in the request body\n{ \"id\": 1, \"username\": \"john_doe\", \"firstName\": \"John\", \"lastName\": \"Doe\", \"email\": \"john.doe@example.com\", \"password\": \"password123\", \"phone\": \"1234567890\", \"userStatus\": 1 }","steps":[]},{"position":2,"action":"Send a POST request to the `/user` endpoint","expected_result":"Response status code is `200 OK` or `201 Created`","data":"Execute the request with the provided data","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response confirms that the user has been successfully created","data":"Inspect the response content","steps":[]},{"position":4,"action":"Retrieve the created user using a GET request to `/user/{username}`","expected_result":"Response status code is `200 OK`, and the returned data matches the input data.","data":"Execute a GET request for `username=john_doe`","steps":[]}],"tags":["API","Functional"],"params":[],"is_muted":"no"},{"id":108,"title":"Create a User with Duplicate Username","description":"Verify that the system handles the creation of a user with a duplicate username correctly","preconditions":"The `/user` endpoint is accessible.\nThe server is running.\nA user with the username `john_doe` already exists","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user`","expected_result":"The URL is correctly set, and the request body contains a duplicate username.","data":"Provide a JSON object with a duplicate username\n{ \"id\": 2, \"username\": \"john_doe\", \"firstName\": \"Johnny\", \"lastName\": \"Doe\", \"email\": \"johnny.doe@example.com\", \"password\": \"password123\", \"phone\": \"0987654321\", \"userStatus\": 1 }","steps":[]},{"position":2,"action":"Send a POST request to the `/user` endpoint","expected_result":"**Result:** Response status code is `400 Bad Request` or an appropriate status indicating the conflict","data":"Execute the request with the provided data","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response contains an error message indicating that the username is already taken","data":"Inspect the response content","steps":[]}],"tags":["API","Functional"],"params":[],"is_muted":"no"},{"id":109,"title":"Create a User with Missing Required Fields","description":"Verify that the system returns an error when attempting to create a user with missing required fields","preconditions":"The `/user` endpoint is accessible.\nThe server is running","postconditions":null,"priority":"medium","severity":"normal","type":"other","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user`","expected_result":"The URL is correctly set, but the request body is missing required fields","data":"Provide a JSON object with missing required fields no `username`\n{ \"id\": 3, \"firstName\": \"John\", \"lastName\": \"Doe\", \"email\": \"john.doe@example.com\", \"password\": \"password123\", \"phone\": \"1234567890\", \"userStatus\": 1 }","steps":[]},{"position":2,"action":"Send a POST request to the `/user` endpoint","expected_result":"Response status code is `400 Bad Request`","data":"Execute the request with the provided data","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response contains an error message indicating which fields are missing.","data":"Inspect the response content","steps":[]}],"tags":["API","Functional"],"params":[],"is_muted":"no"},{"id":110,"title":"Create a User with Invalid Data Types","description":"Verify that the system returns an error when invalid data types are provided for user fields","preconditions":"The `/user` endpoint is accessible.\nThe server is running.","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user`","expected_result":"The URL is correctly set, but the request body contains invalid data types","data":"Provide a JSON object with invalid data types, `username` as an integer \n{\n \"id\": 4,\n \"username\": 12345,\n \"firstName\": \"John\",\n \"lastName\": \"Doe\",\n \"email\": \"john.doe@example.com\",\n \"password\": \"password123\",\n \"phone\": \"1234567890\",\n \"userStatus\": 1\n}\n\n```\n```","steps":[]},{"position":2,"action":"Send a POST request to the `/user` endpoint","expected_result":"Response status code is `400 Bad Request`","data":"Execute the request with the provided data","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response contains an error message indicating that invalid data types were provided.","data":"Inspect the response content","steps":[]}],"tags":["API","Functional"],"params":[],"is_muted":"no"},{"id":111,"title":"Create a User with an Already Existing Email","description":"Create a User with an Already Existing Email","preconditions":"The `/user` endpoint is accessible.\nThe server is running.\nA user with the email `john.doe@example.com` already exists","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user`","expected_result":"The URL is correctly set, and the request body contains an existing email","data":"Provide a JSON object with an already existing email\n{ \"id\": 5, \"username\": \"johnny_doe\", \"firstName\": \"Johnny\", \"lastName\": \"Doe\", \"email\": \"john.doe@example.com\", \"password\": \"password123\", \"phone\": \"0987654321\", \"userStatus\": 1 }","steps":[]},{"position":2,"action":"Send a POST request to the `/user` endpoint","expected_result":"Response status code is `400 Bad Request` or an appropriate status indicating the conflict.","data":"Execute the request with the provided data","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response contains an error message indicating that the email address is already associated with another user","data":"Inspect the response content","steps":[]}],"tags":["API","Functional"],"params":[],"is_muted":"no"}]},{"id":18,"title":"Creates lists of users with given input array / create with array","description":null,"preconditions":null,"suites":[],"cases":[{"id":102,"title":"Create Multiple Users with Valid Data","description":"Verify that multiple users are successfully created when valid user data is provided in the input array","preconditions":"The `/user/createWithArray` endpoint is accessible.\nThe server is running and ready to accept requests","postconditions":null,"priority":"medium","severity":"normal","type":"other","behavior":"positive","automation":"automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user/createWithArray`","expected_result":"The URL is correctly set, and the request body is properly formatted","data":"Provide a valid JSON array of user objects in the request body\n[ { \"id\": 1, \"username\": \"john_doe\", \"firstName\": \"John\", \"lastName\": \"Doe\", \"email\": \"john.doe@example.com\", \"password\": \"password123\", \"phone\": \"1234567890\", \"userStatus\": 1 }, { \"id\": 2, \"username\": \"jane_doe\", \"firstName\": \"Jane\", \"lastName\": \"Doe\", \"email\": \"jane.doe@example.com\", \"password\": \"password123\", \"phone\": \"0987654321\", \"userStatus\": 1 } ]","steps":[]},{"position":2,"action":"Send a POST request to the `/user/createWithArray` endpoint","expected_result":"Response status code is `200 OK`","data":"Execute the request with the provided dat","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"he response confirms that the users have been successfully created","data":"Inspect the response content","steps":[]},{"position":4,"action":"Retrieve each created user using GET requests to `/user/{username}`","expected_result":"Response status code is `200 OK`, and the returned data matches the input data.","data":"Execute GET requests for `username=john_doe` and `username=jane_doe`","steps":[]}],"tags":["API","Functional"],"params":[],"is_muted":"no"},{"id":103,"title":"Create Users with Duplicate Usernames","description":"Verify that the system handles the creation of users with duplicate usernames correctly","preconditions":"The `/user/createWithArray` endpoint is accessible.\nThe server is running.","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user/createWithArray`","expected_result":"The URL is correctly set, and the request body contains duplicate usernames","data":"Provide a JSON array of user objects with duplicate usernames in the request body\n[ { \"id\": 1, \"username\": \"john_doe\", \"firstName\": \"John\", \"lastName\": \"Doe\", \"email\": \"john.doe@example.com\", \"password\": \"password123\", \"phone\": \"1234567890\", \"userStatus\": 1 }, { \"id\": 2, \"username\": \"john_doe\", \"firstName\": \"Johnny\", \"lastName\": \"Doe\", \"email\": \"johnny.doe@example.com\", \"password\": \"password123\", \"phone\": \"0987654321\", \"userStatus\": 1 } ]","steps":[]},{"position":2,"action":"Send a POST request to the `/user/createWithArray` endpoint","expected_result":"Response status code is `400 Bad Request` or an appropriate status indicating the conflict","data":"Execute the request with the provided data","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response contains an error message indicating that duplicate usernames are not allowed.","data":"Inspect the response content","steps":[]}],"tags":["API","Functional"],"params":[],"is_muted":"no"},{"id":104,"title":"Create Users with Missing Required Fields","description":"Verify that the system returns an error when attempting to create users with missing required fields","preconditions":"The `/user/createWithArray` endpoint is accessible.\nThe server is running","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user/createWithArray`","expected_result":"The URL is correctly set, but the request body is missing required fields","data":"Provide a JSON array of user objects with missing required fields, no `username`\n[ { \"id\": 1, \"firstName\": \"John\", \"lastName\": \"Doe\", \"email\": \"john.doe@example.com\", \"password\": \"password123\", \"phone\": \"1234567890\", \"userStatus\": 1 } ]","steps":[]},{"position":2,"action":"Send a POST request to the `/user/createWithArray` endpoint.","expected_result":"Response status code is `400 Bad Request`","data":"Execute the request with the provided data.","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response contains an error message indicating which fields are missing","data":"Inspect the response content","steps":[]}],"tags":["API","Functional"],"params":[],"is_muted":"no"},{"id":105,"title":"Create Users with Invalid Data Types","description":"Verify that the system returns an error when invalid data types are provided for user fields","preconditions":"The `/user/createWithArray` endpoint is accessible.\nThe server is running","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user/createWithArray`","expected_result":"The URL is correctly set, but the request body contains invalid data types","data":"Provide a JSON array of user objects with invalid data types, `username` as an integer\n[ { \"id\": 1, \"username\": 12345, \"firstName\": \"John\", \"lastName\": \"Doe\", \"email\": \"john.doe@example.com\", \"password\": \"password123\", \"phone\": \"1234567890\", \"userStatus\": 1 } ]","steps":[]},{"position":2,"action":"Send a POST request to the `/user/createWithArray` endpoint","expected_result":"Response status code is `400 Bad Request`","data":"Execute the request with the provided data","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response contains an error message indicating that invalid data types were provided","data":"Inspect the response content","steps":[]}],"tags":["API","Functional"],"params":[],"is_muted":"no"},{"id":106,"title":"Create Empty User Array","description":"Verify that the system handles an empty user array by returning an appropriate error.","preconditions":"The `/user/createWithArray` endpoint is accessible.\nThe server is running","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user/createWithArray`","expected_result":"The URL is correctly set, but the request body contains an empty array","data":"Provide an empty JSON array in the request body , []","steps":[]},{"position":2,"action":"Send a POST request to the `/user/createWithArray` endpoint","expected_result":"Response status code is `400 Bad Request`","data":"Execute the request with the provided data","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response contains an error message indicating that the user array cannot be empty","data":"Inspect the response content","steps":[]}],"tags":["API","Functional"],"params":[],"is_muted":"no"}]}],"cases":[]},{"id":32,"title":"PUT","description":null,"preconditions":null,"suites":[{"id":14,"title":"Updated user","description":null,"preconditions":null,"suites":[],"cases":[{"id":92,"title":"Update User with Valid Data","description":"Verify that the user is successfully updated when valid data is provided by the logged-in user.","preconditions":"The `/user/{username}` endpoint is accessible.\nThe user is logged in and has the appropriate permissions to update the user","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user/{username}`","expected_result":"The URL is correctly set with the valid username","data":"[https://petstore.swagger.io/v2/user/johndoe](https://petstore.swagger.io/v2/user/johndoe)","steps":[]},{"position":2,"action":"Prepare the request body with updated user information","expected_result":"The request body is correctly prepared","data":"{ \"id\": 1, \"username\": \"johndoe\", \"firstName\": \"John\", \"lastName\": \"Doe\", \"email\": \"john.doe@example.com\", \"password\": \"newpassword123\", \"phone\": \"123-456-7890\", \"userStatus\": 1 }","steps":[]},{"position":3,"action":"Send a PUT request to the `/user/{username}` endpoint with the updated user object","expected_result":"Response status code is `200 OK`","data":"Execute the request with the valid user data","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"The response confirms that the user has been successfully updated","data":"Inspect the response content","steps":[]},{"position":5,"action":"Retrieve the updated user information using a GET request to `/user/{username}`","expected_result":"The retrieved user information matches the updated details","data":"Execute a GET request with `username=johndoe`","steps":[]}],"tags":["Update","API","Functional"],"params":[],"is_muted":"no"},{"id":93,"title":"Update User with Missing Required Fields","description":"Verify that the system returns an error when required fields are missing in the request body.","preconditions":"The `/user/{username}` endpoint is accessible.\nThe user is logged in.","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"is-not-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user/{username}`","expected_result":"The URL is correctly set","data":"Provide the username in the path parameter, `username=johndoe`","steps":[]},{"position":2,"action":"Prepare the request body with missing required fields","expected_result":"The request body is missing required fields like `email`, `password`","data":"{ \"firstName\": \"John\", \"lastName\": \"Doe\" }","steps":[]},{"position":3,"action":"Send a PUT request to the `/user/{username}` endpoint with the incomplete user object.","expected_result":"Response status code is `400 Bad Request`","data":"Execute the request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"The response contains an error message indicating that required fields are missing","data":"Inspect the response content","steps":[]}],"tags":["Update","API"],"params":[],"is_muted":"no"},{"id":94,"title":"Update User with Invalid Data","description":"Verify that the system returns an error when invalid data is provided in the request body","preconditions":"The `/user/{username}` endpoint is accessible.\nThe user is logged in","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user/{username}`","expected_result":"The URL is correctly set","data":"Provide the username in the path parameter, `username=johndoe`","steps":[]},{"position":2,"action":"Prepare the request body with invalid data ( incorrect data types)","expected_result":"The request body contains invalid data types","data":"{ \"id\": \"one\", \"username\": \"johndoe\", \"firstName\": \"John\", \"lastName\": \"Doe\", \"email\": \"not-an-email\", \"password\": 123456, \"phone\": \"123-456-7890\", \"userStatus\": \"active\" }","steps":[]},{"position":3,"action":"Send a PUT request to the `/user/{username}` endpoint with the invalid user object","expected_result":"Response status code is `400 Bad Request`","data":"Execute the request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"The response contains an error message indicating that the data is invalid","data":"Inspect the response content","steps":[]}],"tags":["Update","API"],"params":[],"is_muted":"no"},{"id":95,"title":"Update User with Non-existent Username","description":"Verify that the system returns an error when attempting to update a user that does not exist.","preconditions":"The `/user/{username}` endpoint is accessible.\nThe user is logged in.","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user/{username}`","expected_result":"The URL is correctly set with the non-existent username","data":"Provide a non-existent username in the path parameter, `username=unknownuser`","steps":[]},{"position":2,"action":"Prepare the request body with valid user data","expected_result":"The request body is correctly prepared","data":"{ \"id\": 1, \"username\": \"unknownuser\", \"firstName\": \"John\", \"lastName\": \"Doe\", \"email\": \"john.doe@example.com\", \"password\": \"password123\", \"phone\": \"123-456-7890\", \"userStatus\": 1 }","steps":[]},{"position":3,"action":"Send a PUT request to the `/user/{username}` endpoint with the valid user object","expected_result":"Response status code is `404 Not Found`","data":"Execute the request","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"The response contains an error message indicating that the user does not exist","data":"Inspect the response content","steps":[]}],"tags":["Update","API"],"params":[],"is_muted":"no"},{"id":96,"title":"Update User without Authentication","description":"Verify that the system returns an error when trying to update a user without being authenticated.","preconditions":"The `/user/{username}` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user/{username}`","expected_result":"The URL is correctly set","data":"Provide the username in the path parameter, `username=johndoe`","steps":[]},{"position":2,"action":"Prepare the request body with valid user data","expected_result":"The request body is correctly prepared","data":"{ \"id\": 1, \"username\": \"johndoe\", \"firstName\": \"John\", \"lastName\": \"Doe\", \"email\": \"john.doe@example.com\", \"password\": \"password123\", \"phone\": \"123-456-7890\", \"userStatus\": 1 }","steps":[]},{"position":3,"action":"Send a PUT request to the `/user/{username}` endpoint without authentication","expected_result":"Response status code is `401 Unauthorized`","data":"Execute the request without providing any authentication tokens","steps":[]},{"position":4,"action":"Verify the response body","expected_result":"The response contains an error message indicating that authentication is required","data":"Inspect the response content","steps":[]}],"tags":["Update","API"],"params":[],"is_muted":"no"}]}],"cases":[]},{"id":33,"title":"DELETE","description":null,"preconditions":null,"suites":[{"id":15,"title":"Delete by username","description":null,"preconditions":null,"suites":[],"cases":[{"id":97,"title":"Delete User with Valid Username","description":"Verify that the user is successfully deleted when a valid username is provided by the logged-in user","preconditions":"The `/user/{username}` endpoint is accessible.\nThe user is logged in and has the appropriate permissions to delete the user","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"positive","automation":"automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user/{username}`","expected_result":"The URL is correctly set with the valid username","data":"Provide the correct username in the path parameter, `username=johndoe`","steps":[]},{"position":2,"action":"Send a DELETE request to the `/user/{username}` endpoint","expected_result":"Response status code is `200 OK`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response confirms that the user has been successfully deleted","data":"Inspect the response content","steps":[]},{"position":4,"action":"Attempt to retrieve the deleted user using a GET request to `/user/{username}`","expected_result":"Response status code is `404 Not Found`, indicating that the user no longer exists","data":"Execute a GET request with `username=johndoe`","steps":[]}],"tags":["API","Functional"],"params":[],"is_muted":"no"},{"id":98,"title":"Delete User with Non-existent Username","description":"Verify that the system returns an error when attempting to delete a user that does not exist","preconditions":"The `/user/{username}` endpoint is accessible.\nThe user is logged in","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user/{username}`","expected_result":"The URL is correctly set with the non-existent username","data":"Provide a non-existent username in the path parameter, `username=unknownuser`","steps":[]},{"position":2,"action":"Send a DELETE request to the `/user/{username}` endpoint","expected_result":"Response status code is `404 Not Found`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response contains an error message indicating that the user does not exist","data":"Inspect the response content","steps":[]}],"tags":["API","Functional"],"params":[],"is_muted":"no"},{"id":99,"title":"Delete User without Authentication","description":"Verify that the system returns an error when trying to delete a user without being authenticated","preconditions":"The `/user/{username}` endpoint is accessible","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user/{username}`","expected_result":"The URL is correctly set","data":"Provide the username in the path parameter, `username=johndoe`","steps":[]},{"position":2,"action":"Send a DELETE request to the `/user/{username}` endpoint without authentication","expected_result":"Response status code is `401 Unauthorized`","data":"Execute the request without providing any authentication tokens","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response contains an error message indicating that authentication is required","data":"Inspect the response content","steps":[]}],"tags":["API","Functional"],"params":[],"is_muted":"no"},{"id":100,"title":"Delete User with Invalid Username","description":"Verify that the system returns an error when an invalid username format is provided","preconditions":"The `/user/{username}` endpoint is accessible.\nThe user is logged in","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user/{username}`","expected_result":"The URL is set with the invalid username format","data":"Provide an invalid username format in the path parameter, `username=123!@#`","steps":[]},{"position":2,"action":"Send a DELETE request to the `/user/{username}` endpoint","expected_result":"Response status code is `400 Bad Request`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response contains an error message indicating that the username format is invalid","data":"Inspect the response content","steps":[]}],"tags":["API","Functional"],"params":[],"is_muted":"no"},{"id":101,"title":"Delete User as Non-admin User","description":"Verify that the system returns an error when a non-admin user attempts to delete another user.","preconditions":"The `/user/{username}` endpoint is accessible.\nThe non-admin user is logged in","postconditions":null,"priority":"medium","severity":"normal","type":"regression","behavior":"negative","automation":"to-be-automated","status":"actual","is_flaky":"no","layer":"api","milestone":null,"custom_fields":[],"steps_type":"classic","steps":[{"position":1,"action":"Set the endpoint URL to `/user/{username}`","expected_result":"The URL is correctly set","data":"Provide the target username in the path parameter, `username=johndoe`","steps":[]},{"position":2,"action":"Send a DELETE request to the `/user/{username}` endpoint as a non-admin user","expected_result":"Response status code is `403 Forbidden`","data":"Execute the request","steps":[]},{"position":3,"action":"Verify the response body","expected_result":"The response contains an error message indicating that the user does not have permission to delete the user","data":"Inspect the response content","steps":[]}],"tags":["Functional","API"],"params":[],"is_muted":"no"}]}],"cases":[]}],"cases":[]}],"cases":[]}]}